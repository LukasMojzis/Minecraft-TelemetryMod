buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    maven {
        url "https://cursemaven.com"
    }
}

tasks.register('gitHash') {
    doLast {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--always'
            standardOutput = stdout
        }
        project.ext.gitHash = stdout.toString().trim()
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

project.ext.domain = 'cz.lukasmojzis'
project.ext.modid = 'telemetrymod'
project.ext.moddisplayname = 'Telemetry Mod'
project.ext.modbasename = 'TelemetryMod'
project.ext.mcversion = '1.12.2'
project.ext.forgeversion = '14.23.5.2860'

version = '1.0.0'
group = "${ext.domain}.${ext.modid}"
archivesBaseName = "${ext.modid}_${ext.mcversion}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:'+project.ext.mcversion+ '-' + project.ext.forgeversion

    compile 'com.google.code.gson:gson:2.8.9'

    implementation fg.deobf("curse.maven:simpledifficulty-for-underdog-574162:4560351")

    compile 'org.java-websocket:Java-WebSocket:1.5.2'

    compile 'io.obs-websocket.community:client:2.0.0'

}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": { project.ext.moddisplayname },
                "Specification-Vendor": "LukasMojzis",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}-" + { project.ext.gitHash },
                "Implementation-Vendor": "LukasMojzis",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')


shadowJar {
    configurations = [project.configurations.runtime]

    baseName = project.ext.modid + '_' + project.ext.mcversion
    classifier = null
    version = project.version

    relocate 'org.slf4j', "${project.ext.domain}.relocated.org.slf4j"
}

reobf {
    shadowJar {}
}

shadowJar.finalizedBy('reobfShadowJar')

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}
subprojects {
    apply plugin: 'idea'
}

// replace values in mcmod.info before packing in jar
processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.ext.mcversion
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.register('renameJar') {
    doLast {
        def shadowJar = shadowJar.archivePath
        def newName = shadowJar.name.replace("${project.version}", "${project.version}-${project.ext.gitHash}")
        shadowJar.renameTo(new File(shadowJar.parentFile, newName))
    }
}
build.dependsOn renameJar
renameJar.dependsOn gitHash
renameJar.dependsOn shadowJar
